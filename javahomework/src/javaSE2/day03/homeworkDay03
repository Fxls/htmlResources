-1- 读取文本文件中的每一行数据信息，求其和再存入最后一行
    -   Task01.java
-2- 简述Error和Exception的区别。
    -   Error是错误
        -   1．总是不可控制的(unchecked)。
            2．经常用来用于表示系统错误或低层资源的错误。
            3．如何可能的话，应该在系统级被捕捉。
    -   Exception是异常
        -   1．可以是可被控制(checked) 或不可控制的(unchecked)。
            2．表示一个由程序员导致的错误。
            3．应该在应用程序级被处理。
-3- A、错误。最后一个catch不一定是前一个的父类，但是如果有父类异常，一定要放在最后一个catch语句
    B、try——catch——finally
    C、正确
    D、正确

-4- Task04.java(为write和close添加catch语句——IOException)

-5- 简述RuntimeException和非RuntimeException的区别。
    -   Java异常可以分为可检测异常，非检测异常：
        1）可检测异常：可检测异常经编译器验证。对于声明抛出异常的任何方法，
        编译器将强制执行处理或声明规则，不捕捉这个异常，则产生编译错误。
        2）非检测异常：非检测异常不遵循处理或者声明规则。在产生此类异常时，
        不一定非要采取任何适当操作，编译器不会检查是否已经解决了这样一个异常。
        /*****************************************************/
        RuntimeException 类属于非检测异常，因为普通JVM操作引起的运行时异常随时可能发生，
        此类异常一般是由特定操作引发。但这些操作在java应用程序中会频繁出现。因此它们不
        受编译器检查与处理或声明规则的限制。非RuntimeException为可检测异常,该异常经编译器验证。
-6- 写出五个常见的RuntimeException，并进行测试。
    -   RuntimeExceptionTest.java
        -    IllegalArgumentException
            抛出的异常表明向方法传递了一个不合法或不正确的参数
             NullPointerException
            当应用程序试图在需要对象的地方使用null时，抛出该异常
             ArrayIndexOutOfBoundsException
            当使用的数组下标超出数组允许范围时，抛出该异常
             ClassCastException
            当试图将对象强制转换为不是实例的子类时，抛出该异常
             NumberFormatException
            当应用程序试图将字符串转换成一种数值类型，但该字符串
            不能转换为适当格式时，抛出该异常。
-7- printStackTrace()的作用。
    -   输出错误信息，并查询错误发生处

/**************************************************************************/

-1- try block
    finally block
    b>25,b=100
    100
-2- try block
    finally block
    b>25,b=100
    200
-3- 同1
-4- FINALLY
-5- try block
    catch block
    finally block
    b>25,b=35
    204
-6- try block
    catch block
    finally block
    b>25,b=35
    85

