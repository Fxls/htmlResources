-1- 进程与线程的区别。
    -   1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.
        2) 线程的划分尺度小于进程，使得多线程程序的并发性高。
        3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，
            从而极大地提高了程序的运行效率。
        4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、
            顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由
            应用程序提供多个线程执行控制。
        5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时
            执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理
            以及资源分配。这就是进程和线程的重要区别。
-2- 简述线程的状态及其转化。
    -   java中，每个线程都需经历新生、就绪、运行、阻塞和死亡五种状态，线程从新生到死亡的状态变化称为生命周期
        1、线程通过new方法创建，调用start，线程进入就绪状态，等待系统的调度（时间片轮转调度）。
            当系统调度，进入运行状态。正常结束或者异常退出，进程进入死亡状态。
        2、处于运行状态的线程若遇到sleep，则线程进入睡眠状态，不会让出资源锁，
            sleep结束，线程转为就绪状态，等待系统重新调度。
        3、处于运行状态的线程可能在等待io，也可能进入挂起状态。io完成，转为就绪状态。
        4、处于运行状态的线程yield，线程转为就绪状态。（yield只让给权限比自己高的）
        5、处于运行状态的线程遇到wait，线程处于等待状态，需要notify()/notifyALL来唤醒线程，
            唤醒后的线程处于锁定状态，获取了“同步锁”，之后，线程才转为就绪状态。处于运行的线
            程synchronized，加上后 变成同步操作。处于锁定状态，获取了“同步锁”，之后，
            线程才转为就绪状态。
-3- 简述线程的创建方式。
    -   1、自定义线程类继承Thread并重写其中的run方法，实例化向上造型
        2、实现Runnable接口，重写run方法，创建线程时使用已经定义好的run方法
        3、匿名内部类实现
-4- A、正确
    B、正确
    C、正确
    D、错误，getPriority是返回该线程的优先级（int）
-5- TimeOutput.java(Daemon实现)
    TimeOutput2.java(join实现)
-6- A、错误
    B、错误
    C、正确
    D、错误
    yield方法不保证当前的线程会暂停或者停止，但是可以保证当前线程在调用yield方法时会放弃CPU。
-7-