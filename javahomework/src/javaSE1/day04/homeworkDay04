-1- B
-2- A:错误，iterator方法是java.lang.Iterator接口，被Collection继承。
    B:错误，hasNext是检查序列中是否还有元素，next是获得迭代的下个元素。
    C:正确。
    D:错误，新循环并非新的语法，而是在编译过程中，编译器会将新循环转换为迭代器模式。所以新循环本质上是迭代器。
-3- 简述ArraysList和LinkedList的不同。
    - ArrayList：在内存中分配连续的空间，实现了长度可变的数组（线性表）。
                -优点：遍历元素和随机访问元素的效率比较高。
                -缺点：添加和删除需要大量移动元素，效率低。按照内容查询效率低。
    - LinkedList：采用链表存储方式
                 -优点：插入删除元素效率高（但前提也是先低效率查询才可以），如果插入删除发生在头尾可减少查询
                       次数。
                 -缺点：遍历和随机访问元素效率低下
-4- D
-5- C
-6- 简述List和数组直接相互转化的方法。
    -   List -> 数组：<T> T[] toArray(T[] a)
    -   数组 -> List：List<T> asList<T...a>(返回的List不能增删元素)
-7- Task07.java
-8- 简述队列和栈的不同，以及在JAVA中如何实现这两个数据结构。
    - 队列和栈是两种不同的数据结构。它们有以下区别
      （1）操作的名称不同。队列的插入称为入队，队列的删除称为出队。栈的插入称为进栈，栈的删除称为出栈
      （2）可操作的方式不同。队列是在队尾入队，队头出队，即两边都可操作。而栈的进栈和出栈都是在栈顶进行的，无法对栈底直接进行操作。
      （3）操作的方法不同。队列是先进先出（FIFO），即队列的修改是依先进先出的原则进行的。新来的成员总是加入队尾（不能从中间插入），
          每次离开的成员总是队列头上（不允许中途离队）。而栈为后进先出（LIFO）,即每次删除（出栈）的总是当前栈中最新的元素，即最后插入
          （进栈）的元素，而最先插入的被放在栈的底部，要到最后才能删除。
    -DequeTest.java
